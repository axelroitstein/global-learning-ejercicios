// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Books {
//   id        Int       @id @default(autoincrement())
//   author    String
//   title     String
//   stock     Int
//   loans     Loans[]
//   createdAt DateTime  @updatedAt @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")

//   @@map("books")
// }

// model Users {
//   id        Int       @id @default(autoincrement())
//   firstName String    @map("first_name")
//   lastName  String    @map("last_name")
//   email     String    @unique
//   address   String
//   password  String
//   loans     Loans[]
//   birthday  DateTime
//   createdAt DateTime  @updatedAt @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")

//   @@map("users")
// }

// model Responsibles {
//   id        Int       @id @default(autoincrement())
//   firstName String    @map("first_name")
//   lastName  String    @map("last_name")
//   laborID   Int       @unique @map("labor_id")
//   loans     Loans[]
//   createdAt DateTime  @updatedAt @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")

//   @@map("responsibles")
// }

// model Loans {
//   id           Int           @id @default(autoincrement())
//   bookID       Int           @map("book_id")
//   book         Books?        @relation(fields: [bookID], references: [id])
//   userID       Int           @map("user_id")
//   user         Users?        @relation(fields: [userID], references: [id])
//   reponsibleID Int           @map("responsible_id")
//   responsible  Responsibles? @relation(fields: [reponsibleID], references: [id])
//   loanDate     DateTime      @map("loan_date")
//   returnDate   DateTime      @map("return_date")
//   createdAt    DateTime      @updatedAt @map("created_at")
//   updatedAt    DateTime      @updatedAt @map("updated_at")
//   deletedAt    DateTime?     @map("deleted_at")

//   @@map("loans")
// }

// MI ESQUEMA DE PRISMA :)

model Songs {
  id          Int      @id @default(autoincrement())
  artistId    Int      @map("artist_id")
  artist      Artists  @relation(fields: [artistId], references: [id])
  album       Albums[]
  name        String
  genre       String
  duration    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  userFav     Users[] 

  @@map("songs")
}

model Artists {
  id          Int      @id @default(autoincrement())
  name        String
  song        Songs[]
  album       Albums[]
  nationality String
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("artists")
}

model Albums {
  id          Int      @id @default(autoincrement())
  name        String
  artistId    Int @map("artist_id") 
  artist      Artists  @relation(fields: [artistId], references: [id])
  song        Songs[]
  releaseDate DateTime @map("release_date")
  createdAt   DateTime @default(now())  @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("albums")
}

model Users {
  id        Int        @id @default(autoincrement())
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  email     String     @unique
  password  String
  birthday  String
  song      Songs[]
  createdAt DateTime   @default(now())  @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")

  @@map("users")
}

